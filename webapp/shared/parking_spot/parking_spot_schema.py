"""
Copyright 2025 binary butterfly GmbH
Use of this source code is governed by an MIT-style license that can be found in the LICENSE.txt.
"""

from flask_openapi.decorator import Schema
from flask_openapi.schema import (
    AnyOfField,
    ArrayField,
    BooleanField,
    DateTimeField,
    DecimalField,
    EnumField,
    IntegerField,
    JsonSchema,
    ObjectField,
    Reference,
    StringField,
)
from parkapi_sources.models.enums import ExternalIdentifierType, ParkingSpotType, PurposeType

from webapp.models.parking_spot import ParkingSpotStatus

parking_spot_schema = JsonSchema(
    title='ParkingSpot',
    properties={
        'id': IntegerField(description='Internal ID, generated by ParkAPI Service.'),
        'created_at': DateTimeField(description='Creation date in ParkAPI Service database, cannot be set by clients.'),
        'modified_at': DateTimeField(
            description='Last modified value in ParkAPI Service database, cannot be set by clients.',
        ),
        'source_id': IntegerField(minimum=1, description='Source ID, generated by ParkAPI Service.'),
        'parking_site_id': IntegerField(
            minimum=1,
            required=False,
            description='ParkingSite ID, generated by ParkAPI Service.',
        ),
        'original_uid': StringField(maxLength=256, description='Unique Identifier in original system.'),
        'type': EnumField(enum=ParkingSpotType, required=False),
        'description': StringField(required=False, maxLength=4096),
        'address': StringField(required=False, maxLength=256),
        'lat': DecimalField(precision=10, scale=7),
        'lon': DecimalField(precision=10, scale=7),
        'name': StringField(required=False),
        'purpose': EnumField(enum=PurposeType),
        'geojson': ObjectField(
            required=False,
            description='GeoJSON geometry. Additional attribute is `coordinates` containing coordinates depending '
            'on `type`.',
            properties={
                'type': AnyOfField(allowed_values=['Polygon', 'MultiPolygon', 'LineString', 'MultiLineString']),
            },
            additionalProperties=True,
        ),
        'restricted_to': ArrayField(
            items=Reference(obj='ParkingRestriction'),
            required=False,
            description='Restrictions which apply. If there are multiple options, they should be understood with an '
            'logical or.',
        ),
        'has_realtime_data': BooleanField(
            description='Whether the parking spot has realtime data or not.',
        ),
        'realtime_status': EnumField(enum=ParkingSpotStatus, required=False),
        'static_data_updated_at': DateTimeField(
            required=False,
            description='Last time static fields were updated. Can be set by the client.',
        ),
        'realtime_data_updated_at': DateTimeField(
            required=False,
            description='Last time realtime fields were updated. Can be set by the client.',
        ),
        'external_identifiers': ArrayField(
            items=ObjectField(
                properties={
                    'type': EnumField(enum=ExternalIdentifierType),
                    'value': StringField(maxLength=256),
                },
            ),
            required=False,
        ),
        'tags': ArrayField(items=StringField(maxLength=256), required=False),
    },
)

parking_spot_example = {}

parking_spot_component = Schema('ParkingSpot', parking_spot_schema, parking_spot_example)
