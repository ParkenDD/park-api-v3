"""parking spots

Revision ID: 8d2bcc119ee8
Revises: 4f09ed999210
Create Date: 2025-03-26 18:46:08.985595

"""

import sqlalchemy as sa
import sqlalchemy_utc
from alembic import op

from webapp.common.sqlalchemy.point import Point

# revision identifiers, used by Alembic.
revision = '8d2bcc119ee8'
down_revision = '4f09ed999210'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'parking_spot',
        sa.Column('source_id', sa.BigInteger(), nullable=False),
        sa.Column('parking_site_id', sa.BigInteger(), nullable=True),
        sa.Column('original_uid', sa.String(length=256), nullable=False),
        sa.Column('name', sa.String(length=256), nullable=True),
        sa.Column('lat', sa.Numeric(precision=10, scale=7), nullable=False),
        sa.Column('lon', sa.Numeric(precision=10, scale=7), nullable=False),
        sa.Column('geojson', sa.Text(), nullable=True),
        sa.Column('purpose', sa.Enum('CAR', 'BIKE', 'ITEM', name='parkingspotpurposetype'), nullable=False),
        sa.Column('realtime_status', sa.Enum('AVAILABLE', 'TAKEN', 'UNKNOWN', name='parkingspotstatus'), nullable=True),
        sa.Column('static_data_updated_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('realtime_data_updated_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=True),
        sa.Column('has_realtime_data', sa.Boolean(), nullable=False),
        sa.Column('geometry', Point(), nullable=False),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('created_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['parking_site_id'], ['parking_site.id'], name=op.f('fk_parking_spot_parking_site_id')),
        sa.ForeignKeyConstraint(['source_id'], ['source.id'], name=op.f('fk_parking_spot_source_id')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_parking_spot')),
    )
    with op.batch_alter_table('parking_spot', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_parking_spot_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_parking_spot_modified_at'), ['modified_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_parking_spot_original_uid'), ['original_uid'], unique=False)
        batch_op.create_index(batch_op.f('ix_parking_spot_purpose'), ['purpose'], unique=False)
        batch_op.create_index('ix_parking_spot_source_original_uid', ['source_id', 'original_uid'], unique=True)

    op.create_table(
        'parking_restriction',
        sa.Column('parking_site_id', sa.BigInteger(), nullable=True),
        sa.Column('parking_spot_id', sa.BigInteger(), nullable=True),
        sa.Column(
            'type',
            sa.Enum(
                'DISABLED',
                'WOMEN',
                'FAMILY',
                'CARSHARING',
                'CHARGING',
                'TAXI',
                'PRIVATE',
                'DELIVERY',
                'TRUCK',
                'BUS',
                'NO_PARKING',
                'NO_STOPPING',
                'CUSTOMER',
                'RESIDENT',
                name='parkingaudience',
            ),
            nullable=True,
        ),
        sa.Column('hours', sa.String(length=512), nullable=True),
        sa.Column('max_stay', sa.String(length=32), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('created_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['parking_site_id'], ['parking_site.id'], name=op.f('fk_parking_restriction_parking_site_id')
        ),
        sa.ForeignKeyConstraint(
            ['parking_spot_id'], ['parking_spot.id'], name=op.f('fk_parking_restriction_parking_spot_id')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_parking_restriction')),
        mysql_charset='utf8mb4',
        mysql_collate='utf8mb4_unicode_ci',
    )
    with op.batch_alter_table('parking_restriction', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_parking_restriction_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_parking_restriction_modified_at'), ['modified_at'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('parking_restriction', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_parking_restriction_modified_at'))
        batch_op.drop_index(batch_op.f('ix_parking_restriction_created_at'))

    op.drop_table('parking_restriction')
    with op.batch_alter_table('parking_spot', schema=None) as batch_op:
        batch_op.drop_index('ix_parking_spot_source_original_uid')
        batch_op.drop_index(batch_op.f('ix_parking_spot_purpose'))
        batch_op.drop_index(batch_op.f('ix_parking_spot_original_uid'))
        batch_op.drop_index(batch_op.f('ix_parking_spot_modified_at'))
        batch_op.drop_index(batch_op.f('ix_parking_spot_created_at'))

    op.drop_table('parking_spot')
    # ### end Alembic commands ###
