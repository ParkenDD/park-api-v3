"""extend-data-model

Revision ID: 314b11ae0e1c
Revises: db3ef5b7669d
Create Date: 2025-07-27 14:17:51.433351

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '314b11ae0e1c'
down_revision = 'db3ef5b7669d'
branch_labels = None
depends_on = None

old_purposes: list[str] = ['CAR', 'BIKE', 'ITEM']
new_purposes: list[str] = ['CAR', 'BIKE', 'MOTORCYCLE', 'ITEM']
old_audiences: list[str] = [
    'DISABLED',
    'WOMEN',
    'FAMILY',
    'CARSHARING',
    'CHARGING',
    'TAXI',
    'PRIVATE',
    'DELIVERY',
    'TRUCK',
    'BUS',
    'NO_PARKING',
    'NO_STOPPING',
    'CUSTOMER',
    'RESIDENT',
]

new_audiences: list[str] = [
    'DISABLED',
    'WOMEN',
    'FAMILY',
    'CARSHARING',
    'CHARGING',
    'TAXI',
    'PRIVATE',
    'DELIVERY',
    'TRUCK',
    'BUS',
    'NO_PARKING',
    'NO_STOPPING',
    'CUSTOMER',
    'RESIDENT',
    'CARAVAN',
]

new_orientation: list[str] = ['PARALLEL', 'DIAGONAL', 'PERPENDICULAR']
new_parkingtype: list[str] = ['LANE', 'ON_KERB', 'HALF_ON_KERB', 'SHOULDER']
new_side: list[str] = ['RIGHT', 'LEFT']


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Prepare enums for Postgresql
    engine_name = op.get_bind().engine.name
    if engine_name == 'postgresql':
        op.execute('ALTER TYPE purposetype RENAME TO _purposetype')
        sa.Enum(*new_purposes, name='purposetype').create(op.get_bind())
        op.execute(
            "ALTER TABLE parking_site ALTER COLUMN purpose DROP DEFAULT, ALTER COLUMN purpose type purposetype using purpose::text::purposetype, ALTER COLUMN purpose SET DEFAULT 'CAR';"
        )
        op.execute(
            "ALTER TABLE parking_spot ALTER COLUMN purpose type purposetype using purpose::text::purposetype, ALTER COLUMN purpose SET DEFAULT 'CAR';"
        )
        sa.Enum(*old_purposes, name='_purposetype').drop(op.get_bind())
        sa.Enum(*old_purposes, name='parkingspotpurposetype').drop(op.get_bind())

        op.execute('ALTER TYPE parkingaudience RENAME TO _parkingaudience')
        sa.Enum(*new_audiences, name='parkingaudience').create(op.get_bind())
        op.execute(
            'ALTER TABLE parking_restriction ALTER COLUMN type type parkingaudience using type::text::parkingaudience;'
        )
        sa.Enum(*old_audiences, name='_parkingaudience').drop(op.get_bind())

        sa.Enum(*new_orientation, name='parkingsiteorientation').create(op.get_bind())
        sa.Enum(*new_parkingtype, name='parkingtype').create(op.get_bind())
        sa.Enum(*new_side, name='parkingsiteside').create(op.get_bind())

    with op.batch_alter_table('parking_restriction', schema=None) as batch_op:
        batch_op.alter_column(
            'type',
            existing_type=postgresql.ENUM(*old_audiences, name='parkingaudience'),
            type_=sa.Enum(*new_audiences, name='parkingaudience'),
            existing_nullable=False,
        )

    with op.batch_alter_table('external_identifier', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parking_spot_id', sa.BigInteger(), nullable=True))
        batch_op.alter_column('parking_site_id', existing_type=sa.BIGINT(), nullable=True)
        batch_op.create_foreign_key(
            batch_op.f('fk_external_identifier_parking_spot_id'), 'parking_spot', ['parking_spot_id'], ['id']
        )

    with op.batch_alter_table('parking_site', schema=None) as batch_op:
        batch_op.add_column(sa.Column('geojson', sa.Text(), nullable=True))
        batch_op.add_column(
            sa.Column('orientation', sa.Enum(*new_orientation, name='parkingsiteorientation'), nullable=True)
        )
        batch_op.add_column(sa.Column('side', sa.Enum(*new_side, name='parkingsiteside'), nullable=True))
        batch_op.add_column(sa.Column('parking_type', sa.Enum(*new_parkingtype, name='parkingtype'), nullable=True))
        batch_op.add_column(sa.Column('capacity_min', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('capacity_max', sa.Integer(), nullable=True))
        batch_op.alter_column(
            'purpose',
            existing_type=postgresql.ENUM(*old_purposes, name='purposetype'),
            type_=sa.Enum(*new_purposes, name='purposetype'),
            existing_nullable=False,
        )

    with op.batch_alter_table('parking_spot', schema=None) as batch_op:
        batch_op.alter_column(
            'purpose',
            existing_type=postgresql.ENUM(*old_purposes, name='purposetype'),
            type_=sa.Enum(*new_purposes, name='purposetype'),
            existing_nullable=False,
        )

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parking_spot_id', sa.BigInteger(), nullable=False))
        batch_op.create_foreign_key(batch_op.f('fk_tag_parking_spot_id'), 'parking_spot', ['parking_spot_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    engine_name = op.get_bind().engine.name
    if engine_name == 'postgresql':
        op.execute('ALTER TYPE purposetype RENAME TO _purposetype')
        sa.Enum(*old_purposes, name='purposetype').create(op.get_bind())
        sa.Enum(*old_purposes, name='parkingspotpurposetype').create(op.get_bind())
        op.execute(
            "ALTER TABLE parking_site ALTER COLUMN purpose DROP DEFAULT, ALTER COLUMN purpose type purposetype using purpose::text::purposetype, ALTER COLUMN purpose SET DEFAULT 'CAR';"
        )
        op.execute(
            'ALTER TABLE parking_spot ALTER COLUMN purpose DROP DEFAULT, ALTER COLUMN purpose type parkingspotpurposetype using purpose::text::parkingspotpurposetype;'
        )
        sa.Enum(*new_purposes, name='_purposetype').drop(op.get_bind())

        op.execute('ALTER TYPE parkingaudience RENAME TO _parkingaudience')
        sa.Enum(*old_audiences, name='parkingaudience').create(op.get_bind())
        op.execute(
            'ALTER TABLE parking_restriction ALTER COLUMN type type parkingaudience using type::text::parkingaudience;'
        )
        sa.Enum(*new_audiences, name='_parkingaudience').drop(op.get_bind())

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_tag_parking_spot_id'), type_='foreignkey')
        batch_op.drop_column('parking_spot_id')

    with op.batch_alter_table('parking_spot', schema=None) as batch_op:
        batch_op.alter_column(
            'purpose',
            existing_type=sa.Enum(*new_purposes, name='purposetype'),
            type_=postgresql.ENUM(*old_purposes, name='purposetype'),
            existing_nullable=False,
        )

    with op.batch_alter_table('parking_site', schema=None) as batch_op:
        batch_op.drop_column('capacity_max')
        batch_op.drop_column('capacity_min')
        batch_op.drop_column('parking_type')
        batch_op.drop_column('side')
        batch_op.drop_column('orientation')
        batch_op.drop_column('geojson')

    with op.batch_alter_table('external_identifier', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_external_identifier_parking_spot_id'), type_='foreignkey')
        batch_op.alter_column('parking_site_id', existing_type=sa.BIGINT(), nullable=False)
        batch_op.drop_column('parking_spot_id')

    if engine_name == 'postgresql':
        sa.Enum(*new_orientation, name='parkingsiteorientation').drop(op.get_bind())
        sa.Enum(*new_parkingtype, name='parkingtype').drop(op.get_bind())
        sa.Enum(*new_side, name='parkingsiteside').drop(op.get_bind())

    # ### end Alembic commands ###
